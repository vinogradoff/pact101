plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.4.RELEASE'

//uncomment to verify with gradle plugin: gradle pactVerify
/*    id "au.com.dius.pact" version "3.6.2" */
}

apply plugin: 'io.spring.dependency-management'

ext['junit-jupiter.version'] = '5.4.2'

bootJar {
    archiveBaseName = 'weather-rest-service'
    archiveVersion =  '1.0.0'
}


repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation "au.com.dius:pact-jvm-provider-junit5_2.12:3.6.2"
    testImplementation "org.assertj:assertj-core:3.12.2"
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
}

project.version="0.0.3"
def getGitHashForLastCommit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

test {
    useJUnitPlatform()
    systemProperty "pact.provider.version","${project.version}-${getGitHashForLastCommit()}"
    systemProperty "pact.verifier.publishResults",true
}

//uncomment to verify with gradle plugin: gradle pactVerify
/*
pact {

    serviceProviders {

        // You can define as many as you need, but each must have a unique name
        weather_service_provider {
            // All the provider properties are optional, and have sensible defaults (shown below)
            protocol = 'http'
            host = 'localhost'
            port = 8888
            //path = '/'

            // Again, you can define as many consumers for each provider as you need, but each must have a unique name
            hasPactWith('weather portal') {

                // currently supports a file path using file() or a URL using url()
                pactSource = file('../consumer/target/pacts/weather_portal-weather_service.json')

            }


        }
    }
}
*/